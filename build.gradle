plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}


version = "1.6.0"
group = "me.tepis.integratednbt" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "integratednbt"

configurations {
    modLib
    implementation.extendsFrom modLib
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
//    mappings channel: 'snapshot', version: '20201028-1.16.3'
//    mappings channel: 'official', version: '1.16.5'
    mappings channel: 'official', version: '1.20.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
            lazyToken('minecraft_classpath') {
                configurations.modLib.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
            lazyToken('minecraft_classpath') {
                configurations.modLib.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
            lazyToken('minecraft_classpath') {
                configurations.modLib.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

repositories {
    // Yeah, I have no idea what I am doing... It seems I need to get a GitHub Access token or something
    // to access the maven repository. Maybe.
    // I don't feel like doing that.
    // I am just going to copy whatever the author of Integrated Proxy is doing
    // a.k.a. download all the jars and put in the libs folder
    flatDir {
        dir 'libs'
    }

    mavenCentral()
	mavenLocal()

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    } // curse mods
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.3'

    //Integrated dynamics
    implementation fg.deobf("curse.maven:cyclops-core-232758:4808715");
    implementation fg.deobf("curse.maven:common-capabilities-247007:4620480");
    implementation fg.deobf("curse.maven:integrated-dynamics-236307:4791813");
    implementation fg.deobf("curse.maven:integrated-tunnels-251389:4782861");
    implementation fg.deobf("curse.maven:integrated-crafting-287357:4791829");
    implementation fg.deobf("curse.maven:integrated-terminals-295910:4728167");

    modLib "com.google.re2j:re2j:1.1"


//    minecraft 'net.minecraftforge:forge:1.16.4-35.1.13'
//
//    implementation 'org.cyclops.integrateddynamics:IntegratedDynamics:1.16.4-1.1.21:deobf'
//    implementation 'org.cyclops.commoncapabilities:CommonCapabilities:1.16.4-2.5.4:deobf'
//    implementation 'org.cyclops.cyclopscore:CyclopsCore-1.16.4-1.11.1:deobf'
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
//jar {
//    manifest {
//        attributes([
//            "Specification-Title": "examplemod",
//            "Specification-Vendor": "examplemodsareus",
//            "Specification-Version": "1", // We are version 1 of ourselves
//            "Implementation-Title": project.name,
//            "Implementation-Version": "${version}",
//            "Implementation-Vendor" :"examplemodsareus",
//            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
